services:

  db:
    image: ${REGISTRY}/${DB_IMAGE_NAME}:latest
    container_name: gophkeeper_db
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./volumes/postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      #- POSTGRES_DB=${DB_NAME}
      - POSTGRES_DB=gophkeeper
      #- POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256 --auth-local=trust"
      - PGDATA=/var/lib/postgresql/data/pgdata
    user: postgres
    ports:
      - "${DB_PORT}:5432" # опционально, для доступа к БД извне
#    command:
#      - "postgres"
#      - "-c"
#      - "password_encryption=scram-sha-256"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d gophkeeper" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    stop_grace_period: 1m # Даем время на корректное завершение
    networks:
      - gophkeeper_network

  app:
    image: ${REGISTRY}/${APP_IMAGE_NAME}:latest
    container_name: gophkeeper_app
    ports:
      - "${APP_PORT}:8080" # внешний порт берем из .env
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - CONFIG_PATH=./config/local.yml
#      - DB_PORT=${DB_PORT}
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./config:/app/config
    restart: unless-stopped
    networks:
      - gophkeeper_network

# volumes:
#   postgres_data:
#     name: gophkeeper_postgres_data

networks:
  gophkeeper_network:
    name: gophkeeper_network
