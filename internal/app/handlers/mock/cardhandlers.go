// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/handlers/cardhandlers.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/FischukSergey/gophkeeper/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProtoCardService is a mock of ProtoCardService interface.
type MockProtoCardService struct {
	ctrl     *gomock.Controller
	recorder *MockProtoCardServiceMockRecorder
}

// MockProtoCardServiceMockRecorder is the mock recorder for MockProtoCardService.
type MockProtoCardServiceMockRecorder struct {
	mock *MockProtoCardService
}

// NewMockProtoCardService creates a new mock instance.
func NewMockProtoCardService(ctrl *gomock.Controller) *MockProtoCardService {
	mock := &MockProtoCardService{ctrl: ctrl}
	mock.recorder = &MockProtoCardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtoCardService) EXPECT() *MockProtoCardServiceMockRecorder {
	return m.recorder
}

// CardAddMetadataService mocks base method.
func (m *MockProtoCardService) CardAddMetadataService(ctx context.Context, userID, cardID int64, metadata []models.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardAddMetadataService", ctx, userID, cardID, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// CardAddMetadataService indicates an expected call of CardAddMetadataService.
func (mr *MockProtoCardServiceMockRecorder) CardAddMetadataService(ctx, userID, cardID, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardAddMetadataService", reflect.TypeOf((*MockProtoCardService)(nil).CardAddMetadataService), ctx, userID, cardID, metadata)
}

// CardAddService mocks base method.
func (m *MockProtoCardService) CardAddService(ctx context.Context, card models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardAddService", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// CardAddService indicates an expected call of CardAddService.
func (mr *MockProtoCardServiceMockRecorder) CardAddService(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardAddService", reflect.TypeOf((*MockProtoCardService)(nil).CardAddService), ctx, card)
}

// CardDeleteService mocks base method.
func (m *MockProtoCardService) CardDeleteService(ctx context.Context, cardID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardDeleteService", ctx, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CardDeleteService indicates an expected call of CardDeleteService.
func (mr *MockProtoCardServiceMockRecorder) CardDeleteService(ctx, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardDeleteService", reflect.TypeOf((*MockProtoCardService)(nil).CardDeleteService), ctx, cardID)
}

// CardGetListService mocks base method.
func (m *MockProtoCardService) CardGetListService(ctx context.Context, userID int64) ([]models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardGetListService", ctx, userID)
	ret0, _ := ret[0].([]models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardGetListService indicates an expected call of CardGetListService.
func (mr *MockProtoCardServiceMockRecorder) CardGetListService(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardGetListService", reflect.TypeOf((*MockProtoCardService)(nil).CardGetListService), ctx, userID)
}
